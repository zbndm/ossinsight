// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prompt template generate chart prompt template should work 1`] = `
"# TypeScript
type Column = string;
interface Chart { title: string }
interface PieChart extends Chart { label: Column; value: Column }
interface LineChart extends Chart { x: Column; y: Column | Column[]; }
interface BarChart extends Chart  { x: Column; y: Column | Column[]; }
interface MapChart extends Chart  { country_code: Column; value: Column; }
interface NumberCard extends Chart  { label?: Column; value: Column; }
interface RepoCard extends Chart  { repo_name: Column; }
interface PersonalCard extends Chart  { user_login: Column; }
interface Table extends Chart  { columns: Column[]; }

If the result only has one number, use NumberCard
If the result has a column such as country_code, use MapChart
If the result has multiple number columns, use LineChart or BarChart
If the result has a time column and a number column, use LineChart
If the result is a numerical distribution, use BarChart
If the result has a percentage column, use PieChart
If the result is a repository or project list, use RepoCard
If the result is a user list, use PersonalCard
If not sure, use Table

actor_login is the user login of actor

# Example
Question: How many contributors in @pingcap/tidb
Data: [{"contributors": 378}]
Chart: {"chartName": "NumberCard", "title": "Number of Contributors in @pingcap/tidb", "value": "contributors"}

---
Let's think step by step, generate the chart option json for the following question and data.
Question: The commits and pushes in @pingcap/tidb across months
Data: [{"commits":671,"event_month":"2015-09-01","pushes":521},{"commits":561,"event_month":"2015-10-01","pushes":426},{"commits":546,"event_month":"2015-11-01","pushes":399},{"commits":478,"event_month":"2015-12-01","pushes":343}]
Chart: 
"
`;

exports[`prompt template query playground prompt template should work 1`] = `
"# MySQL SQL
Table github_events, columns = [id, type, created_at, repo_id, repo_name, actor_id, actor_login, language, additions, deletions, action, number, org_login, org_id, state, closed_at, comments, pr_merged_at, pr_merged, pr_changed_files, pr_review_comments, pr_or_issue_id, push_size, push_distinct_size, creator_user_login, creator_user_id, pr_or_issue_created_at]
Column type, enums = ['PullRequestEvent', 'PushEvent', 'IssueCommentEvent', 'IssuesEvent', 'PullRequestReviewCommentEvent', 'WatchEvent', 'CreateEvent', 'DeleteEvent', 'ForkEvent', 'ReleaseEvent']
Column number, number is issue number
Table github_repos, columns = [repo_id, repo_name, owner_id, owner_login, owner_is_org, description, primary_language, license, size, stars, forks, parent_repo_id, is_fork, is_archived, is_deleted, latest_released_at, pushed_at, created_at, updated_at]
Column primary_language, invalid = [null, '']
Table github_users, columns = [id, login, type, name, organization, country_code, followers, followings, created_at, updated_at]
Column type, enums = ['USR', 'ORG']
Column country_code, invalid = ['', 'N/A', 'UND']
Table collections, columns = [id, name]
Table collection_items, columns = [collection_id, repo_id, repo_name]
Table trending_repos, columns = [repo_name, created_at]
Table github_repo_topics, columns = [repo_id, topic]
Relation collections.id = collection_items.collection_id
Relation collection_items.repo_id = github_repos.repo_id
Relation github_events.repo_id = github_repos.repo_id
Relation github_events.repo_name = github_repos.repo_name
Relation github_events.actor_id = github_users.id
Relation github_events.actor_login = github_users.login
Relation github_events.creator_user_id = github_users.id
Relation github_repos.owner_id = github_users.id
Relation github_repos.repo_id = github_repo_topics.repo_id
Relation trending_repos.repo_name = github_repos.repo_name

Select statement limit 20 by default, if question need more data, please add limit 200
When type = 'PullRequestReviewCommentEvent' or type = 'IssueCommentEvent', the action could be 'created'
When type = 'PullRequestEvent' or type = 'IssuesEvent', the action could be 'opened', 'closed'
When type = 'PullRequestEvent', action = 'closed' and pr_merged = 1, it means the pull request is merged
PushEvent: trigger when commit has been pushed
Return the pr_or_issue_link column for PR / issue list: SELECT CONCAT('https://github.com/', repo_name, '/issues/', number) AS pr_or_issue_link
If question contains words like 'exclude bot': WHERE actor_login NOT LIKE "%bot%"
If question contains words like 'related to xxx' or 'about to xxx': WHERE description LIKE '%xxx%'
Contributor: the person who opened pull request to the repo, it will trigger a PullRequestEvent
The most popular repos has the most stars,
Similar repositories will have similar topics, or be in the same collection, order by the similarity
collection is a categorization of some similar repositories, but not all repositories have a corresponding collection
The trending_repos table contains the most recent and popular repositories
notice: avoid non-existent and ambiguous column
---
-- @pingcap/tidb cumulative stars across months
SELECT t_month, stars, SUM(stars) OVER(ORDER BY t_month ASC) AS cumulative_stars FROM ( SELECT DATE_FORMAT(created_at, '%Y-%m-01') AS t_month, COUNT(DISTINCT actor_login) AS stars FROM github_events ge WHERE ge.type = 'WatchEvent' AND ge.repo_id = (SELECT repo_id FROM github_repos WHERE repo_name = 'pingcap/tidb') AND ge.created_at != '1970-01-01 00:00:00' GROUP BY t_month ) star_counts ORDER BY t_month ASC;
---
-- Let's think step by step, generate one correct SQL to do query: How many contributors in @pingcap/tidb
---

"
`;

exports[`prompt template sql playground prompt template should work 1`] = `
"# MySQL SQL
Table github_events, columns = [type, created_at, repo_id, repo_name, actor_id, actor_login, language, additions, deletions, action, number, org_login, org_id, state, closed_at, comments, pr_merged_at, pr_merged, pr_changed_files, pr_review_comments, pr_or_issue_id, push_size, push_distinct_size, creator_user_login, creator_user_id, pr_or_issue_created_at]
Column type, enums = ['PullRequestEvent', 'PushEvent', 'IssueCommentEvent', 'IssuesEvent', 'PullRequestReviewCommentEvent', 'WatchEvent', 'CreateEvent', 'DeleteEvent', 'ForkEvent', 'ReleaseEvent']
Table github_repos, columns = [repo_id, repo_name, owner_id, owner_login, owner_is_org, description, primary_language, license, size, stars, forks, parent_repo_id, is_fork, is_archived, is_deleted, latest_released_at, pushed_at, created_at, updated_at]
Relation github_events.repo_id = github_repos.repo_id
Define my_user_id = 5086433
Define my_user_login = 'Mini256'
Define this_repo_name = 'pingcap/tidb'
Define this_repo_id = 41986369

---
-- How many contributors in @pingcap/tidb
SELECT COUNT(DISTINCT creator_user_login) AS contributors FROM github_events WHERE repo_name = 'pingcap/tidb' AND type = 'PullRequestEvent' AND action = 'closed' AND pr_merged = true
-- Who am I
SELECT 'Mini256' AS user_login;
-- Am I a contributor to this repo
SELECT CASE sub.prs > 0 WHEN TRUE THEN 'Yes' ELSE 'No' END AS is_contributor FROM ( SELECT COUNT(*) AS prs FROM github_events WHERE type = 'PullRequestEvent' AND action = 'opened' AND repo_id = 41986369 AND actor_login = 'Mini256' ) AS sub;
---
-- Let's think step by step, generate one correct SQL to do query: How many contributors in @pingcap/tidb
---
SELECT 
"
`;
